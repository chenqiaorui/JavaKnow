RPC
RPC(Remote procedure Call)-远程过程调用，它是一种通过网络从远程计算机上请求服务，而不需要了解底层网络技术的协议，RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信协议中，RPC跨越了传输层和应用层。RPC使得分布式程序就像开发本地程序一样简单。

RPC采用客户端（服务调用端）/服务器端（服务提供方）模式，都运行在自己的jvm中。客户端只需要引入要使用的接口，接口的实现和运行都在服务器端。RPC主要依赖的技术包括序列化
反序列化和数据传输协议，这是一种定义与实现相分离的设计。

目前Java使用比较多的RPC方案主要有RMI（JDK自带）、Hessian、Dubbo以及Thrift等。

注意：RPC主要指内部服务之间的调用，RESTful也可以用于内部服务之间的调用，但主要用途还在于外部系统提供服务。

常见RPC框架
	1.RMI：JDK自带的RPC
	2.Dubbo：Dubbo是阿里开源的一个高性能优秀的服务框架，使得应用可以通过高性能的RPC实现服务的输出和输入功能，可以和Spring框架无缝集成。

	3.Hessian：Hession是一个轻量级的remotingonhttp工具，使用简单的方法提供了RMI功能。想必Webservice，Hessian更简单便捷。采用的是二进制RPC协议，所以它很适合发送二进制数据。

	4.Thrift：Apache Thrift是facebook开源的跨语言的RPC通信框架。
消息中间件
	消息中间件，也可以叫做中央消息队列或者是消息队列（区别于本地消息队列，本地消息队列指的是JVM内的队列实现），是一种独立的队列系统。消息中间件经常用来解决内部服务之间的异步调用问题。请求服务方把请求队列放到队列中即可返回，然后等待服务提供方去队列中获取请求进行处理，之后通过回调机制把结果返回给请求服务方。

	异步调用知识一个消息中间层一个非常常见的应用场景。此外，常用的消息队列应用场景还有如下几个：
		1.解耦：一个业务的非核心流程需要依赖其他系统，但结果并不重要，有通知即可。
		2.最终一致性：指的是两个系统的状态保持一致，可以有一定延迟，只要最终达到一致性即可。经常用在解决分布式事务上。
		3.广播：消息队列最基本的功能。生产者只负责生产消息，订阅者接收消息。
		4.错峰和流控
	消息队列系统：ActiveMQ、RabbitMQ、Kafka