泛型的实际应用
	实现最小值函数
	自己设计一个泛型的获取数组最小值的函数。并且这个方法只能接受Number的子类并且实现了Comparable接口
	例子：
	//注意：Number没有实现Comparable接口
	private static <T extends Number & Comparable<? super T> > T min(T[] values) {
		if(values == null || values.length == 0) return null;
		T min = values[0];
		for (int = 1; i < values.length-1; i++) {
			if (min.compareTo(values[i] > 0)) min = values[i];
		}
		return min;

	}
数据结构
	使用数组实现栈
	自己实现栈，要求这个栈具有push()、pop()（返回栈顶元素并出栈）、peek()（返回栈顶元素不出栈）
	isEmpty()、size()这些基本方法
	提示：每次入栈之前先判断栈的容量是否够用，如果不够用就用Arrays.copyOf()进行扩容；
	例子：
	public class MyStack {
		private int []  storage; //存放栈中元素的数组
		private int [] capacity; //栈的容量
		private int count; // 栈中元素数量
		private static final int GROW_FACTOR = 2;

		// TODO: 不带初始容量的构造方法。默认容量为8
		public MyStack() {
			this.capacity = 8;
			this.storage = new int[8];
			this.count = 0;
		}

		//TODO: 带初始容量的构造方法
		public MyStack(int initialCapacity) {
			if (initialCapacity < 1) {
				throw new IllegalArgumentException("Capacity too small.")
			}
			this.capacity = initialCapacity;
			this.storage = new int[initialCapacity];
			this.count = 0;
		}

		// TODO: 入栈
		public void push(int value) {
			if(count = capacity)
				ensureCapacity();
			storage[count++] = value;
		}

		
	}