1.基础
	1.1正确使用equals()方法
	Object的equals方法容易抛出空指针异常，应使用常量或者确定有值的对象来调用equals
	注意：
		每种原始类型都有默认值，如int默认为0，boolean默认为false，null是任何引用类型的默认值
		可以使用==或者!=操作来比较null值，但是不能使用其他算法或者逻辑操作。在Java 中null==null将返回true
		不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常
	1.2整型包装类值的比较
	所有整型包装类对象值的比较必须使用equals方法
	先看以下例子：
	Integer x = 1;
	Integer y = 1;
	x==y; //true
	Integer a = new Integer(1);
	integer b = new Integer(1);
	a==b; // false
	a.equals(b); //true
	1.3BigDecimal
	1.3.1BigDecimal用处
	浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用equals来判断。具体原理和浮点数的编码方式有关。
	例子：
	float a = 1.0f - 0.9f;
	float b = 0.9f - 0.8f;
	System.out.print(a); //0.100000024;
	System.out.print(b); //0.099999964;
	a == b; //false

	具有基本数学知识的我们很清楚的知道输出并不是我们想要的结果（精度丢失），如何解决呢？一种很常用的方法是使用BigDecimal来定义浮点数的值，再进行浮点数的运算操作。
	例子：
	BigDecimal a = new BigDecimal("1.0");
	BigDecimal b = new BigDecimal("0.9");
	BigDecimal c = new BigDecimal("0.8");
	BigDecimal x = a.subtract(b); //0.1
	BigDecimal y = b.subtract(c); //0.1
	x.equals(y); //true

	1.3.2BigDecimal的大小比较
	a.compareTo(b):返回-1表示小于，0表示等于，1表示大于

	1.3.3BigDecimal保留几位小数
	例子：
		BigDecimal m = new BigDecimal("1.255433");
		BigDecimal n = m.setScalse(3,BigDecimal.ROUND_HALF_DOWN);
		n // 1.255

	1.3.4BigDecimal使用注意事项
	我们在使用BigDecimal的时候，为了防止精度丢失，推荐使用它的BigDecimal（String）构造方法来创建对象。

	1.3.5总结
	BigDecimal主要用来操作浮点数，BigInteger主要用来操作大整数（超过long类型）
	BigDecimal的实现利用到了BigInteger，所不同的是Bigdecimal加入来小数位的概念。


2.集合
	2.1.1简介
	Arrays.aslist()它将一个数组转换为List集合
	例子：
	String []myArray = {"Apple", "Banana"};
	List<String> myList = Arrays.asList(myArray);

	2.2Collection.toArray()方法使用的坑&如何反转数组
	该方法是一个泛型方法 <T> T[] toArray(T[] a);如果toArray方法中没有传递任何参数的话返回的是object类型数组
	例子：
	  String [] s = new String[] {"dog","lazy"};
	  List<String> list =Arrays.asList(s);
	  Collections.reverse(list);
	  s=list.toArray(new String[0]); // 没有指定类型会报错
	2.3不要在foreach循环中进行元素的remove/add


